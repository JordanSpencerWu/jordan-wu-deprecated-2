{"componentChunkName":"component---src-templates-book-note-index-tsx","path":"/books/code-complete/general-control-issues/","result":{"data":{"markdownRemark":{"html":"<p>All control structures depend on the evaluation of boolean expression. Use the identifiers true and false in boolean expressions rather than using values like 0 and 1. Avoid complicated negative boolean expressions in your program. Organize numeric test so that they follow points on a number line.</p>\n<blockquote>\n<p>A \"compound statement\" or \"block\" is a collection of statements that are treated as a single statement for purpose of controlling the flow of a program.</p>\n</blockquote>\n<blockquote>\n<p>Avoid deep nesting, few people can understand more than three levels of nested <em>ifs</em>.</p>\n</blockquote>\n<p>The core of structured programming is the simple idea that a program should use only one-in, one-out control constructs. A one-in, one-out control construct is a block of code that has only one place it can start and only one place it can end. A structured program progresses in an orderly, disciplined way, rather than jumping around unpredictably.</p>\n<p>The central concept of structured programming are still useful today and apply to consideration in using <em>break</em>, <em>continue</em>, <em>throw</em>, <em>catch</em>, <em>return</em>, and other topics.</p>\n<blockquote>\n<p>\"Programming complexity\" is the number of mental objects you have to keep in mind simultaneously in order to understand the program.</p>\n</blockquote>\n<blockquote>\n<p>Poor use of control structures increases complexity; good use decreases it. All control structures depend on the evaluation of boolean expression. Use the identifiers true and false in boolean expressions rather than using values like 0 and 1. Avoid complicated negative boolean expressions in your program. Organize numeric test so that they follow points on a number line.</p>\n</blockquote>\n<blockquote>\n<p>A \"compound statement\" or \"block\" is a collection of statements that are treated as a single statement for purpose of controlling the flow of a program.</p>\n</blockquote>\n<blockquote>\n<p>Avoid deep nesting, few people can understand more than three levels of nested <em>ifs</em>.</p>\n</blockquote>\n<p>The core of structured programming is the simple idea that a program should use only one-in, one-out control constructs. A one-in, one-out control construct is a block of code that has only one place it can start and only one place it can end. A structured program progresses in an orderly, disciplined way, rather than jumping around unpredictably.</p>\n<p>The central concept of structured programming are still useful today and apply to consideration in using <em>break</em>, <em>continue</em>, <em>throw</em>, <em>catch</em>, <em>return</em>, and other topics.</p>\n<blockquote>\n<p>\"Programming complexity\" is the number of mental objects you have to keep in mind simultaneously in order to understand the program.</p>\n</blockquote>\n<blockquote>\n<p>Poor use of control structures increases complexity; good use decreases it.</p>\n</blockquote>","frontmatter":{"author":["Steve McConnell"],"seo_description":"Code complete second edition - a practical handbook of software construction by Steve McConnell notes.","title":"General Control Issues"}}},"pageContext":{"slug":"/books/code-complete/general-control-issues/"}},"staticQueryHashes":["1584199405","4008572679"]}