{"componentChunkName":"component---src-templates-book-note-index-tsx","path":"/books/reactive-programming-with-rxjs5/","result":{"data":{"markdownRemark":{"html":"<p>An Observable represents a stream of data.</p>\n<p>The Observable \"pushes\" values to consumers as they become available.</p>\n<p>RxJS is push-based, so the source of events the Observable will push new values to the consumer the Subscriber, without the consumer requesting the next value.</p>\n<p>Subscribers have to implement the Observer interface. The Observer interface contains three methods: next, complete, and error.</p>\n<p>In RxJS, methods that transform or query sequences are called operators.</p>\n<p>Observables are immutable, and every operator applied to them creates a new Observable.</p>\n<p>Observables are just streams of events that we transform, combine, and query.</p>\n<p>An Observable pipeline is a group of operators chained together, where each one takes an Observable as input and returns an Observable as output.</p>\n<p>A Subject is a type that implements both Observer and Observable types. As an Observer, it can subscribe to Observables, and as an Observable it can produce values and have Observers subscribe to it.</p>\n<p>AsyncSubject emits the last value of a sequence only if the sequence completes.</p>\n<p>When an Observer subscribes to a BehaviorSubject, it receives the last emitted value and then all the subsequent values. BehaviorSubject requires that we provide a starting value, so that all Observers will always receive a value when they subscribe to a BehaviorSubject.</p>\n<p>A ReplaySubject caches its values and re-emits them to any Observer that subscribe late to it.</p>\n<p>Hot Observables emit values regardless of having any subscribers. Any Subscriber subscribed to a hot Observable will receive values emitted only from the exact moment it subscribes to it.</p>\n<p>Cold Observable emit the entire sequence of values from the start to every subscriber. A cold Observable emits values only when Subscriber subscribe to it.</p>\n<p>We can turn a cold Observable into a hot one using publish.</p>\n<p>A Scheduler is a mechanism to \"Schedule\" an action to happen in the future.</p>","frontmatter":{"author":["Sergi Mansilla"],"seo_description":"Reactive programming with rxjs - untangle your asynchronous javascript code by Sergi Mansilla notes.","title":"Reactive Programming With RxJS - Untangle Your Asynchronous JavaScript Code"}}},"pageContext":{"slug":"/books/reactive-programming-with-rxjs5/"}},"staticQueryHashes":["1584199405","4008572679"]}