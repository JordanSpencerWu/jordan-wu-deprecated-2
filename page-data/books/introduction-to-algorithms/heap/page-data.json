{"componentChunkName":"component---src-templates-book-note-index-tsx","path":"/books/introduction-to-algorithms/heap/","result":{"data":{"markdownRemark":{"html":"<p>The <strong>binary heap</strong> data structure is an array object that we can view as a nearly complete binary tree. An array $A$ that represents a heap is an object with two attributes: $A.length$, which as usual gives the number of elements in the array, and $A.heap-size$, which represents how many elements in the heap are stored within array $A$. The root of the tree is $A[1]$, and given the index $i$ of a node, we can easily compute the indices of its parent, left child, and right child:</p>\n<h5>PARENT i</h5>\n<p>$return \\ \\lfloor \\frac{i}{2} \\rfloor$</p>\n<h5>LEFT i</h5>\n<p>$return \\ 2i$</p>\n<h5>RIGHT i</h5>\n<p>$return \\ 2i + 1$</p>\n<p>This works for $A[1]$ where 1 is the first element in the array, when using 0 based index use the following below:</p>\n<h5>PARENT i</h5>\n<p>$return \\ \\lfloor \\frac{i - 1}{2} \\rfloor$</p>\n<h5>LEFT i</h5>\n<p>$return \\ 2i + 1$</p>\n<h5>RIGHT i</h5>\n<p>$return \\ 2i + 2$</p>\n<p>We define the <strong>height of a node</strong> in a heap to be the number of edges on the longest simple downward path from the node to a leaf, and we define the <strong>height of the heap</strong> to be the height of its root.</p>\n<p>There are two kinds of binary heaps: <strong>max-heaps</strong> and <strong>min-heaps</strong></p>\n<h5>Max-heap</h5>\n<p>The <strong>max-heap property</strong> is that for every node $i$ other than the root,</p>\n<p>$A[PARENT(i)] \\geq A[i]$</p>\n<p>Thus, the largest element in a max-heap is stored at the root $A[1]$ the first element in the array</p>\n<p>In order to maintain the max-heap property, we call the procedure <strong>MAX-HEAPIFY</strong>. Its input are an array $A$ and an index $i$ into the array. Assuming that the binary trees rooted at $LEFT(i)$ and $RIGHT(i)$ are max-heaps, but that $A[i]$ might be smaller than its children, thus violating the max-heap property. <strong>MAX-HEAPIFY</strong> lets the value at $A[i]$ \"float down\" in the max-heap so that the subtree rooted at index $i$ obeys the max-heap property.</p>\n<h5>MAX-HEAPIFY A,i</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  l <span class=\"token operator\">=</span> <span class=\"token function\">LEFT</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  r <span class=\"token operator\">=</span> <span class=\"token function\">RIGHT</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> l <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>heap<span class=\"token operator\">-</span>size and <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    largest <span class=\"token operator\">=</span> l\n  <span class=\"token keyword\">else</span> largest <span class=\"token operator\">=</span> i\n  <span class=\"token keyword\">if</span> r <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>heap<span class=\"token operator\">-</span>size and <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>largest<span class=\"token punctuation\">]</span>\n    largest <span class=\"token operator\">=</span> r\n  <span class=\"token keyword\">if</span> largest <span class=\"token operator\">!=</span> i\n    exchange <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">with</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>largest<span class=\"token punctuation\">]</span>\n    MAX<span class=\"token operator\">-</span><span class=\"token function\">HEAPIFY</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>largest<span class=\"token punctuation\">)</span></code></pre></div>\n<p>At each step, the largest of the elements $A[i]$, $A[LEFT(i)]$, and $A[RIGHT(i)]$ is determined, and its index is stored in largest. If $A[i]$ is largest, then the subtree rooted at node $i$ is already a max-heap and the procedure terminates. Otherwise, one of the two children has the largest element, and $A[i]$ is swapped with $A[largest]$, which causes node $i$ and its children to satify the max-heap property.</p>\n<p>The worst-case running time is $\\Theta(lg \\\\ n)$.</p>\n<h5>Java Implementation Using Figure 6.2 In Book</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unsortedArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">maxHeapify</span><span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// returns 16 14 10 8 7 9 3 2 4 1</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">maxHeapify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> parentIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">int</span> leftChildIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>parentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">int</span> rightChildIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>parentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">int</span> indexOfLargestValue <span class=\"token operator\">=</span> parentIndex<span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftChildIndex <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>indexOfLargestValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              indexOfLargestValue <span class=\"token operator\">=</span> leftChildIndex<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightChildIndex <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>indexOfLargestValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              indexOfLargestValue <span class=\"token operator\">=</span> rightChildIndex<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>indexOfLargestValue <span class=\"token operator\">!=</span> parentIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n              array<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>indexOfLargestValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n              array<span class=\"token punctuation\">[</span>indexOfLargestValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n              <span class=\"token function\">maxHeapify</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> indexOfLargestValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Min-heap</h5>\n<p>The <strong>min-heap property</strong> is that for every node $i$ other than the root,</p>\n<p>$A[PARENT(i)] \\leq A[i]$</p>\n<p>The smallest element in a min-heap is at the root.</p>\n<p>In order to maintain the min-heap property, we call the procedure <strong>MIN-HEAPIFY</strong>. Its input are an array $A$ and an index $i$ into the array. Assuming that the binary trees rooted at $LEFT(i)$ and $RIGHT(i)$ are min-heaps, but that $A[i]$ might be greater than its children, thus violating the min-heap property. <strong>MIN-HEAPIFY</strong> lets the value at $A[i]$ \"float down\" in the min-heap so that the subtree rooted at index $i$ obeys the min-heap property.</p>\n<h5>MIN-HEAPIFY A,i</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  l <span class=\"token operator\">=</span> <span class=\"token function\">LEFT</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  r <span class=\"token operator\">=</span> <span class=\"token function\">RIGHT</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> l <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>heap<span class=\"token operator\">-</span>size and <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    lowest <span class=\"token operator\">=</span> l\n  <span class=\"token keyword\">else</span> lowest <span class=\"token operator\">=</span> i\n  <span class=\"token keyword\">if</span> r <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>heap<span class=\"token operator\">-</span>size and <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>lowest<span class=\"token punctuation\">]</span>\n    lowest <span class=\"token operator\">=</span> r\n  <span class=\"token keyword\">if</span> lowest <span class=\"token operator\">!=</span> i\n    exchange <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">with</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>lowest<span class=\"token punctuation\">]</span>\n    MAX<span class=\"token operator\">-</span><span class=\"token function\">HEAPIFY</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>lowest<span class=\"token punctuation\">)</span></code></pre></div>\n<p>At each step, the lowest of the elements $A[i]$, $A[LEFT(i)]$, and $A[RIGHT(i)]$ is determined, and its index is stored in lowest. If $A[i]$ is lowest, then the subtree rooted at node $i$ is already a max-heap and the procedure terminates. Otherwise, one of the two children has the lowest element, and $A[i]$ is swapped with $A[lowest]$, which causes node $i$ and its children to satify the min-heap property.</p>\n<p>The worst-case running time is $\\Theta(lg \\\\ n)$.</p>\n<h5>Java Implementation</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unsortedArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">minHeapify</span><span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// returns 4 7 10 14 1 9 3 2 8 16</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">minHeapify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> parentIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> leftChildIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>parentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> rightChildIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>parentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> indexOfLowestValue <span class=\"token operator\">=</span> parentIndex<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftChildIndex <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>indexOfLowestValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                indexOfLowestValue <span class=\"token operator\">=</span> leftChildIndex<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightChildIndex <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>indexOfLowestValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                indexOfLowestValue <span class=\"token operator\">=</span> rightChildIndex<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>indexOfLowestValue <span class=\"token operator\">!=</span> parentIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                array<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>indexOfLowestValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                array<span class=\"token punctuation\">[</span>indexOfLowestValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">minHeapify</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> indexOfLowestValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"author":["Thomas H. Cornmen","And","Charles E Leiserson","And","Ronald L. Riverest","And","Clifford Stein"],"seo_description":"Introduction to Algorithms by Thomas H. Cornmen and Charles E Leiserson and Ronald L. Riverest and Clifford Stein notes.","title":"Heap"}}},"pageContext":{"slug":"/books/introduction-to-algorithms/heap/"}}}