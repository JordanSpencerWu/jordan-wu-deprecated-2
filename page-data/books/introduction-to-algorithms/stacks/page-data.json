{"componentChunkName":"component---src-templates-book-note-index-tsx","path":"/books/introduction-to-algorithms/stacks/","result":{"data":{"markdownRemark":{"html":"<p>In a <strong>stack</strong>, the element deleted from the set is the one most recently inserted: the stack implements a <strong>last-in, first-out</strong>, or <strong>LIFO</strong>.</p>\n<p>The <strong>INSERT</strong> operation on a stack is often called <strong>PUSH</strong>, and the <strong>DELETE</strong> operation, which does not take an element argument, is often called <strong>POP</strong>.</p>\n<blockquote>\n<p>These names are allusions to physical stacks, such as the spring-loaded stacks of plates used in cafeterias. The order in which plates are popped from the stack is the reverse of the order in which they were pushed onto the stack, since only the top plate is accessible.</p>\n</blockquote>\n<p>We can implement a stack of at most $n$ elements with an array $S[1..n]$. The array has an attribute $S.top$ that indexes the most recently inserted element. The stack consists of elements $S[1..S.top]$, where $S[1]$ is the element at the bottom of the stack and $S[S.top]$ is the element at the top.</p>\n<p>When $S.top = 0$, the stack contains no elements and is <strong>empty</strong>. We can test to see whether the stack is empty by query operation <strong>STACK-EMPTY</strong>. If we attempt to pop an empty stack, we say the stack <strong>underflows</strong>, which is normally an error. If $S.top$ exceeds $n$, the stack <strong>overflows</strong>.</p>\n<blockquote>\n<p>Each of the three stack operation takes $\\Theta(1)$.</p>\n</blockquote>\n<h5>STACK-EMPTY S</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">if</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">return</span> TRUE\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> FALSE</code></pre></div>\n<h5>PUSH S,x</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token class-name\">S</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token class-name\">S</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x</code></pre></div>\n<h5>POP S</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">if</span> STACK<span class=\"token operator\">-</span><span class=\"token function\">EMPTY</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">)</span>\n    error <span class=\"token string\">\"underflow\"</span>\n  <span class=\"token keyword\">else</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>","frontmatter":{"author":["Thomas H. Cornmen","And","Charles E Leiserson","And","Ronald L. Riverest","And","Clifford Stein"],"seo_description":"Introduction to Algorithms by Thomas H. Cornmen and Charles E Leiserson and Ronald L. Riverest and Clifford Stein notes.","title":"Stacks"}}},"pageContext":{"slug":"/books/introduction-to-algorithms/stacks/"}},"staticQueryHashes":["1584199405","4008572679"]}