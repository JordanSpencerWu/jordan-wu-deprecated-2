{"componentChunkName":"component---src-templates-book-note-index-tsx","path":"/books/introduction-to-algorithms/linked-lists/","result":{"data":{"markdownRemark":{"html":"<p>A <strong>linked list</strong> is a data structure in which the objects are arranged in a linear order, the order in a linked list is determined by a pointer in each object.</p>\n<p>A <strong>doubly linked list</strong> $L$ is an object with an attribute $key$ and two other pointer attribute: <strong>next</strong> and <strong>prev</strong>. Given an element $x$ in the list, $x.next$ points to its <strong>successor</strong> in the linked list, and $x.prev$ points to its <strong>predecessor</strong>. If $x.prev = NIL$, the element $x$ has no predecessor and is therefore the first element, or <strong>head</strong>, of the list. If $x.next = NIL$, the element $x$ has no successor and is therefore the last element, or <strong>tail</strong>, of the list. An attribute $L.head$ points to the first element of the list. If $L.head = NIL$, the list is empty.</p>\n<blockquote>\n<p>A list may have one of several forms. It may be either singly linked or doubly linked, it may be sorted or not, and it may be circular or not.</p>\n</blockquote>\n<p><strong>Singly linked</strong>, we omit the <em>prev</em> pointer in each element.</p>\n<p>A <strong>sorted</strong> list, the linear order of the list corresponds to the linear order of keys stored in elements of the list; the minimum element is then the head of the list, and the maximum element is the tail.</p>\n<p>A <strong>unsorted</strong> list, the elements can appear in any order.</p>\n<p>In a <strong>circular</strong> list, the <em>prev</em> pointer of the head of the list points to the tail, and the <em>next</em> pointer of the tail of the list points to the head.</p>\n<h5>Searching a linked list</h5>\n<p>The procedure <strong>LIST-SEARCH L,k</strong> finds the first element with key $k$ in list $L$ by a simple linear search, returning a pointer to this element. If no object with key $k$ appears in the list, then the procedure return $NIL$.</p>\n<h5>LIST=SEARCH L,k</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  x <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span>head\n  whilte x <span class=\"token operator\">!=</span> NIL and x<span class=\"token punctuation\">.</span>key <span class=\"token operator\">!=</span> k\n    x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>next\n  <span class=\"token keyword\">return</span> x</code></pre></div>\n<p>To search a list of $n$ objects, the <strong>LIST-SEARCH</strong> procedure takes $\\Theta(n)$ time in the worst case, since it may have to search the entire list.</p>\n<h5>Inserting into a linked list</h5>\n<p>Given an element $x$ whose $key$ attribute has already been set, <strong>LIST-INSERT</strong> procedure \"splices\" $x$ onto the front of the linked list.</p>\n<h5>LIST-INSERT L,x</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  x<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span>head\n  <span class=\"token keyword\">if</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">!=</span> NIL\n    <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> x\n  <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> x\n  x<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> NIL</code></pre></div>\n<p>The running time for <strong>LIST-INSERT</strong> on a list of $n$ elements is $\\Theta(1)$.</p>\n<h5>Deleting from a linked list</h5>\n<p>The procedure <strong>LIST-DELETE</strong> removes an element $x$ from a linked list $L$. It must be given a pointer to $x$, and it then \"splices\" x out of list by updating pointers. If we wish to delete an element with a given key, we must first call <strong>LIST-SEARCH</strong> to retrieve a pointer to the element.</p>\n<h5>LIST-DELETE L,x</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">!=</span> NIL\n    x<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>next\n  <span class=\"token keyword\">else</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>next\n  <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> NIL\n    x<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>prev</code></pre></div>\n<p><strong>LIST-DELETE</strong> runs in $\\Theta(1)$, but if we wish to delete an element with a given key, $\\Theta(n)$ time is required in the worst case because we must first call <strong>LIST-SEARCH</strong> to find the element.</p>","frontmatter":{"author":["Thomas H. Cornmen","And","Charles E Leiserson","And","Ronald L. Riverest","And","Clifford Stein"],"seo_description":"Introduction to Algorithms by Thomas H. Cornmen and Charles E Leiserson and Ronald L. Riverest and Clifford Stein notes.","title":"Linked Lists"}}},"pageContext":{"slug":"/books/introduction-to-algorithms/linked-lists/"}},"staticQueryHashes":["1584199405","4008572679"]}