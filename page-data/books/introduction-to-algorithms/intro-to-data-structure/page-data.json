{"componentChunkName":"component---src-templates-book-note-index-tsx","path":"/books/introduction-to-algorithms/intro-to-data-structure/","result":{"data":{"markdownRemark":{"html":"<p>Sets are <strong>dynamic</strong>, the sets can be manipulated by algorithms can grow, shrink, or change over time. A <strong>dictionary</strong> are dynamic set that supports the following operations: insert elements into, delete elements from, and test membership in a set.</p>\n<p>In a typical implementation of a dynamic set, each element is represented by an object whose attributes can be examined and manipulated if we have a pointer to the object. Some kinds of dynamic sets assume that one of the object's attributes is an identifying <strong>key</strong>. The object may contain <strong>satellite data</strong>, which are carried around in other object attributes but are otherwise unused by the set implementation.</p>\n<h5>Operations on dynamic sets</h5>\n<blockquote>\n<p>Operations on a dynamic set can be grouped into two categories: <strong>queries</strong>, which simply return information about the set, and <strong>modifying operations</strong>, which change the set.</p>\n</blockquote>\n<h5>SEARCH S,k</h5>\n<p>A query that, given a set $S$ and a key value $k$, return a pointer $x$ to an element in $S$ such that $x.key = k$, or $NIL$ if no such element belongs to $S$.</p>\n<h5>INSERT S,x</h5>\n<p>A modifying operation that augments the set $S$ with the element pointed to by $x$. We usually assume that any attributes in element $x$ needed by the set implementation have already been initialized.</p>\n<h5>DELETE S,x</h5>\n<p>A modifying operation that, given a pointer $x$ to an element in the set $S$, removes $x$ from $S$. Note that this operation takes a pointer to an element $x$, not a key value.</p>\n<h5>MINIMUM S</h5>\n<p>A query on a totally ordered set $S$ that returns a pointer to the element of $S$ with the smallest key.</p>\n<h5>MAXIMUM S</h5>\n<p>A query on a totally ordered set $S$ that returns a pointer to the element of $S$ with the largest key.</p>\n<h5>SUCCESSOR S,x</h5>\n<p>A query that, given an element $x$ whose key is from a totally ordered set $S$, return a pointer to the next larger element in $S$, or $NIL$ if $x$ is the maximum element.</p>\n<h5>PREDECESSOR S,x</h5>\n<p>A query that, given an element $x$ whose key is from a totally ordered set $S$, return a pointer to the next smaller element in $S$, or $NIL$ if $x$ is the minimum element.</p>","frontmatter":{"author":["Thomas H. Cornmen","And","Charles E Leiserson","And","Ronald L. Riverest","And","Clifford Stein"],"seo_description":"Introduction to Algorithms by Thomas H. Cornmen and Charles E Leiserson and Ronald L. Riverest and Clifford Stein notes.","title":"Introduction To Data Structures"}}},"pageContext":{"slug":"/books/introduction-to-algorithms/intro-to-data-structure/"}}}