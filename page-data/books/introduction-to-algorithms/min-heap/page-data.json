{"componentChunkName":"component---src-templates-book-note-index-tsx","path":"/books/introduction-to-algorithms/min-heap/","result":{"data":{"markdownRemark":{"html":"<p>We can use the procedure <strong>MIN-HEAPIFY</strong> in a bottom-up manner to convert an array $A[1..n]$, where $n = A.length$, into a min-heap. The elements in the subarray $A[(\\lfloor \\frac{n}{2} + 1 \\rfloor )..n]$ are all leaves of the tree, and so each is a 1-element heap to begin with. The procedure <strong>BUILD-MIN-HEAP</strong> goes through the remaining nodes of the tree and run <strong>MIN-HEAPIFY</strong> on each one.</p>\n<h5>BUILD-MIN-HEAP A</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>heap<span class=\"token operator\">-</span>size <span class=\"token operator\">=</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> downto <span class=\"token number\">1</span>\n    MIN<span class=\"token operator\">-</span><span class=\"token function\">HEAPIFY</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Why <strong>BUILD-MIN-HEAP</strong> works correctly, we use the following loop invariant:</p>\n<blockquote>\n<p>At the start of each iteration of the for loop, each node $i + 1, i + 2, \\dots, n$ is the root of a min-heap.</p>\n</blockquote>\n<p>The running time of <strong>BUILD-MIN-HEAP</strong> as follows, each call to <strong>MIN-HEAPIFY</strong> costs $\\Theta(lg \\\\ n)$ time, and <strong>BUILD-MIN-HEAP</strong> makes $\\Theta(n)$. Thus, the running time is $\\Theta(n \\\\ lg \\\\ n)$.</p>\n<h5>Java Implementation</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unsortedArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">buildMinHeap</span><span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>unsortedArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 1 2 3 4 7 9 10 14 8 16</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildMinHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">int</span> midPoint <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> indexsOfLeaves <span class=\"token operator\">=</span> midPoint<span class=\"token punctuation\">;</span> indexsOfLeaves <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> indexsOfLeaves<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token function\">minHeapify</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>indexsOfLeaves<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">minHeapify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> parentIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">int</span> leftChildIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>parentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">int</span> rightChildIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>parentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">int</span> indexOfLowestValue <span class=\"token operator\">=</span> parentIndex<span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftChildIndex <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>leftChildIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>indexOfLowestValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              indexOfLowestValue <span class=\"token operator\">=</span> leftChildIndex<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightChildIndex <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>rightChildIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>indexOfLowestValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              indexOfLowestValue <span class=\"token operator\">=</span> rightChildIndex<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>indexOfLowestValue <span class=\"token operator\">!=</span> parentIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n              array<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>indexOfLowestValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n              array<span class=\"token punctuation\">[</span>indexOfLowestValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n              <span class=\"token function\">minHeapify</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> indexOfLowestValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"author":["Thomas H. Cornmen","And","Charles E Leiserson","And","Ronald L. Riverest","And","Clifford Stein"],"seo_description":"Introduction to Algorithms by Thomas H. Cornmen and Charles E Leiserson and Ronald L. Riverest and Clifford Stein notes.","title":"Min Heap"}}},"pageContext":{"slug":"/books/introduction-to-algorithms/min-heap/"}},"staticQueryHashes":["1584199405","4008572679"]}