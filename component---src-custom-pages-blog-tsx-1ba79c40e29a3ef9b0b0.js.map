{"version":3,"sources":["webpack:///./src/components/page-contents/blog-content/blog-post.tsx","webpack:///./src/components/page-contents/blog-content/index.tsx","webpack:///./src/custom-pages/blog.tsx"],"names":["BlogPost","props","spring","useSpring","opacity","from","date","fluid","excerpt","slug","title","words","readTime","Math","ceil","div","className","style","to","memo","BlogContent","renderBlogs","blogPosts","map","blogPost","key","data","blogPostsNodes","blogs","edges","imageFluids","images","getImageFluid","getBlogPost","index","description","edge","node","childImageSharp","childMarkdownRemark","childMdx","frontmatter","fields","wordCount"],"mappings":"0NAcA,SAASA,EAASC,GAChB,IAAMC,EAASC,YAAU,CAAEC,QAAS,EAAGC,KAAM,CAAED,QAAS,KAChDE,EAA6CL,EAA7CK,KAAMC,EAAuCN,EAAvCM,MAAOC,EAAgCP,EAAhCO,QAASC,EAAuBR,EAAvBQ,KAAMC,EAAiBT,EAAjBS,MAAOC,EAAUV,EAAVU,MACrCC,EAAWC,KAAKC,KAAKH,EAAQ,KAEnC,OACE,kBAAC,IAASI,IAAV,CAAcC,UAAU,8BAA8BC,MAAOf,GAC3D,yBAAKc,UAAU,uCACb,kBAAC,OAAD,CAAME,GAAIT,EAAMO,UAAU,wBACvBN,GAEH,uBAAGM,UAAU,oCAAoCR,GACjD,yBAAKQ,UAAU,+BACb,yBAAKA,UAAU,gCACb,uBAAGA,UAAU,mCAAb,aACA,yBAAKA,UAAU,6BACb,8BAAOV,GACP,0BAAMU,UAAU,qBAChB,8BAAOJ,EAAP,gBAIN,kBAAC,OAAD,CAAMM,GAAIT,EAAMO,UAAU,0BAA1B,QAIF,yBAAKA,UAAU,gCACb,kBAAC,OAAD,CAAME,GAAIT,GACR,kBAAC,IAAD,CAAOO,UAAU,qBAAqBT,MAAOA,OAOxCY,qBAAKnB,GC/BpB,SAASoB,EAAYnB,GACnB,IAEMoB,EAFgBpB,EAAdqB,UAEsBC,KAAI,SAAAC,GAAQ,OACxC,kBAAC,EAAD,eAAUC,IAAKD,EAASf,MAAUe,OAGpC,OAAO,6BAASR,UAAU,0BAA0BK,GAGvCF,qBAAKC,G,ykBCrBL,mBAACnB,GACd,IAAQyB,EAASzB,EAATyB,KAEUC,EAEdD,EAFFE,MAASC,MAILC,EAFFJ,EADFK,OAAUF,MAGwBN,IAAIS,GAClCV,EAAYK,EACfJ,IAAIU,GACJV,KAAI,SAACC,EAAUU,GAAX,cAA2BV,GAAaM,EAAYI,OAE3D,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKxB,MAAM,WAAWyB,YAAY,sBAClC,kBAAC,EAAD,CAAab,UAAWA,MAK9B,SAASU,EAAcI,GAOrB,MAAO,CACL7B,MAHE6B,EAHFC,KACEC,gBAAmB/B,OASzB,SAAS0B,EAAYG,GACnB,MAEIA,EADFC,KAAQE,EADV,EACUA,oBAAqBC,EAD/B,EAC+BA,SAU/B,EANID,GAGKC,EAGT,IACEC,YAAenC,EADjB,EACiBA,KAAMI,EADvB,EACuBA,MACXD,EAFZ,EAEEiC,OAAUjC,KAKZ,MAAO,CACLH,OACAE,QATF,EAGEA,QAOAC,OACAC,QACAC,MAZF,EAIEgC,UAAahC,S","file":"component---src-custom-pages-blog-tsx-1ba79c40e29a3ef9b0b0.js","sourcesContent":["import React, { ReactElement, memo } from \"react\"\nimport Image from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport { useSpring, animated } from \"react-spring\"\n\ntype BlogPostProps = {\n  date: string\n  excerpt: string\n  fluid: any\n  slug: string\n  title: string\n  words: number\n}\n\nfunction BlogPost(props: BlogPostProps): ReactElement {\n  const spring = useSpring({ opacity: 1, from: { opacity: 0 } })\n  const { date, fluid, excerpt, slug, title, words } = props\n  const readTime = Math.ceil(words / 200)\n\n  return (\n    <animated.div className=\"blog-content-post-container\" style={spring}>\n      <div className=\"blog-content-post-article-container\">\n        <Link to={slug} className=\"blog-content-heading\">\n          {title}\n        </Link>\n        <p className=\"blog-content-excerpt-sub-heading\">{excerpt}</p>\n        <div className=\"blog-content-action-section\">\n          <div className=\"blog-content-author-and-date\">\n            <p className=\"blog-content-author-sub-heading\">Jordan Wu</p>\n            <div className=\"blog-content-date-heading\">\n              <time>{date}</time>\n              <span className=\"blog-content-dot\"></span>\n              <span>{readTime} min read</span>\n            </div>\n          </div>\n        </div>\n        <Link to={slug} className=\"blog-content-more-link\">\n          ...\n        </Link>\n      </div>\n      <div className=\"blog-content-image-container\">\n        <Link to={slug}>\n          <Image className=\"blog-content-image\" fluid={fluid} />\n        </Link>\n      </div>\n    </animated.div>\n  )\n}\n\nexport default memo(BlogPost)\n","import React, { ReactElement, memo } from \"react\"\n\nimport \"./style/index.less\"\nimport BlogPost from \"./blog-post\"\n\ntype BlogPost = {\n  date: string\n  excerpt: string\n  fluid: any\n  slug: string\n  title: string\n  words: number\n}\n\ntype BlogContentProps = {\n  blogPosts: Array<BlogPost>\n}\n\nfunction BlogContent(props: BlogContentProps): ReactElement {\n  const { blogPosts } = props\n\n  const renderBlogs = blogPosts.map(blogPost => (\n    <BlogPost key={blogPost.slug} {...blogPost} />\n  ))\n\n  return <section className=\"blog-content-container\">{renderBlogs}</section>\n}\n\nexport default memo(BlogContent)\n","import React, { ReactElement } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/layout\"\nimport BlogContent from \"../components/page-contents/blog-content\"\n\nexport default (props): ReactElement => {\n  const { data } = props\n  const {\n    blogs: { edges: blogPostsNodes },\n    images: { edges: blogImagesNodes },\n  } = data\n\n  const imageFluids = blogImagesNodes.map(getImageFluid)\n  const blogPosts = blogPostsNodes\n    .map(getBlogPost)\n    .map((blogPost, index) => ({ ...blogPost, ...imageFluids[index] }))\n\n  return (\n    <Layout>\n      <SEO title=\"My Blogs\" description=\"This is my blogs.\" />\n      <BlogContent blogPosts={blogPosts} />\n    </Layout>\n  )\n}\n\nfunction getImageFluid(edge) {\n  const {\n    node: {\n      childImageSharp: { fluid },\n    },\n  } = edge\n\n  return {\n    fluid,\n  }\n}\n\nfunction getBlogPost(edge) {\n  const {\n    node: { childMarkdownRemark, childMdx },\n  } = edge\n\n  let node\n  if (childMarkdownRemark) {\n    node = childMarkdownRemark\n  } else {\n    node = childMdx\n  }\n\n  const {\n    frontmatter: { date, title },\n    fields: { slug },\n    excerpt,\n    wordCount: { words },\n  } = node\n\n  return {\n    date,\n    excerpt,\n    slug,\n    title,\n    words,\n  }\n}\n\nexport const blogPostsQuery = graphql`\n  query blogPosts($limit: Int!) {\n    blogs: allFile(\n      filter: {\n        sourceInstanceName: { eq: \"blogs\" }\n        extension: { regex: \"/(md|mdx)/\" }\n      }\n      sort: { order: DESC, fields: name }\n    ) {\n      edges {\n        node {\n          id\n          childMarkdownRemark {\n            id\n            frontmatter {\n              date(formatString: \"MMMM DD\")\n              title\n            }\n            fields {\n              slug\n            }\n            excerpt(pruneLength: 110)\n            wordCount {\n              words\n            }\n          }\n          childMdx {\n            id\n            frontmatter {\n              date(formatString: \"MMMM DD\")\n              title\n            }\n            fields {\n              slug\n            }\n            excerpt(pruneLength: 110)\n            wordCount {\n              words\n            }\n          }\n        }\n      }\n    }\n\n    images: allFile(\n      filter: {sourceInstanceName: {eq: \"images\"}, relativeDirectory: {regex: \"/blogs/*/\"}}\n      sort: { fields: name, order: DESC }\n      limit: $limit\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid_noBase64\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}